#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2012 Sina Corporation
# All Rights Reserved.
# Author: YuWei Peng <pengyuwei@gmail.com>
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import sys
import time
import ConfigParser
import json
import zmq
from collections import OrderedDict

from kanyun.client import api_client
from kanyun.common import const


def show_result(rs):
    if rs is None:
        return
    print rs
    if rs.has_key("data"):
        rs = rs['data']
        if rs is None:
            return
        print "*"*10,"instances in openstack system","*"*10;
        for instance in rs:
            print 'instance id=',instance;
        print "*"*50;
        return;
#        for k, i in rs.iteritems():
#            print "{%s:%s}" % (k, i)
#        print "%d results" % (len(rs))
#        print "spend", time.clock(), "seconds"

    
def show_result2(rs, row_id, cf_str, scf_str):
    if rs is None:
        return
    print rs
    if rs.has_key("data"):
        rs = rs['data']
        if rs is None:
            return
        for k, i in rs.iteritems():
            print "{%s:%s}" % (k, i)
        print "%d results of key=%s,cf=%s,scf=%s" % (len(rs), row_id, cf_str, scf_str)
        print "spend", time.clock(), "seconds"

def main():
    config = ConfigParser.ConfigParser()
    if len(config.read("kanyun.conf"))==0:
        config.read("/etc/kanyun.conf")
    cfg = dict(config.items('client'))
        
    context = zmq.Context()

    apiclient = api_client.ApiClient(cfg['api_host'], cfg['api_port'])
    time.clock()
    if len(sys.argv)==2 and sys.argv[1]=="list_all":
        metric=None;
        rs = apiclient.list_instaces(metric=metric)
        show_result(rs)
    elif len(sys.argv)==3 and sys.argv[1]=="list":
        instance_id=sys.argv[2];
        rs=apiclient.query_usage_report({'method':'query_usage_report','args':{'instance_id':instance_id}});
        #print 'raw message:',rs;
        print "#"*30,"vm infomation of instance %s"%instance_id,"#"*30;
        for info in rs["data"]:
             print info;
        print "#"*60; 
    else:
        print "usage:";
        print "api-client list_all";
        print "api-client list <instance_id>";
        return
if __name__ == '__main__':
    main()
