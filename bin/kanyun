#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2012 Sina Corporation
# All Rights Reserved.
# Author: YuWei Peng <pengyuwei@gmail.com>
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import sys
import time
import ConfigParser
import json
from collections import OrderedDict

from kanyun.worker.worker import *
from kanyun.worker.plugin_traffic_accounting import *
from kanyun.worker import plugin_agent
from kanyun.common.nova_tools import *
from kanyun.common.app import *

def show_usage():
    print "usage:"
    print "\tkanyun <param> [option]"
    print "param:"
    print "\t  -n   : list network traffic, option=time-interval"
    print "\t  -vm  : list virtualmachine info, option=time-interval"
    print "\t  -vi <id> : get vm info"
    print "\t  -cmd <instance_id> <instance_ip> <public_interface>"
    print "example:"
    print "\t kanyun -vi instance-00000166"

def vm(interval=60):
    while True:
        info = plugin_agent.plugin_call()
        if not info is None and len(info) > 0:
            print info
        time.sleep(interval)
    
def network(interval=60):
    while True:
        for k, info in get_traffic_accounting_info().iteritems():
            print k, info

        time.sleep(interval)

def vminfo(app, instanceid):
    tool = NovaTools(app)
    id = tool.get_id(instanceid)
    rs = tool.get_instances(id=id)
    return rs
    
def show_iptables_cmd(instance_id, instance_ip, public_interface):
    cmd1 = """sudo iptables -t filter -N nova-compute-f-inst-%s"""
    cmd2 = """sudo iptables -I FORWARD -s %s -j nova-compute-f-inst-%s"""
    cmd3 = """sudo iptables -A nova-compute-f-inst-%s -o %s -m comment --comment "%s %s accounting rule" """
    print cmd1 % instance_id
    print cmd2 % (instance_ip, instance_id)
    print cmd3 % (instance_id, public_interface, instance_id, instance_ip)
    print "Use 'sudo iptables -n -L|grep Chain|grep nova-compute' to look the policy."

def main():
    if len(sys.argv) == 1:
        show_usage()
        return
    if len(sys.argv) == 2:
        if sys.argv[1] in ['--help', "-h"]:
            print "sudo iptables-save -t filter -c|grep 'accounting rule'"
            print "Use 'sudo virsh list' to look the list of instances."
            print "Use 'sudo virsh dumpxml <id>|grep IP' to look the ipaddress of instance."
            show_usage()
            return
        elif sys.argv[1] in ["?"]:
            show_usage()
            return
    
    app = App(conf="kanyun.conf", log='/tmp/kanyun.log')
    
    if len(sys.argv) == 2:
        if sys.argv[1] == '-n':
            network(interval=60)
            return
    if sys.argv[1] == '-vm':
            vm(interval=60)
            return
            
    elif len(sys.argv) == 3:
        option = sys.argv[2]
        if sys.argv[1] == '-n':
            network(interval=int(option))
            return
        elif sys.argv[1] == '-vm':
            vm(interval=int(option))
            return
        elif sys.argv[1] == '-vi':
            rs = vminfo(app=app, instanceid=option)
            print "id          : ", rs[0]
            print "uuid        : ", rs[1]
            print "display_name: ", rs[2]
        else:
            return
    elif len(sys.argv) == 5:
        if sys.argv[1] == '-cmd':
            instance_id = sys.argv[2]
            instance_ip = sys.argv[3]
            public_interface = sys.argv[4]
            show_iptables_cmd(
                            instance_id=instance_id, 
                            instance_ip=instance_ip, 
                            public_interface=public_interface)
    else:
        pass
    
if __name__ == '__main__':
    main()
